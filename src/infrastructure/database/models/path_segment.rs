//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "path_segment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub segment_parent_id: Option<i32>,
    pub trainer_id: Option<i32>,
    pub segment_type_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::SegmentParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::segment_type::Entity",
        from = "Column::SegmentTypeId",
        to = "super::segment_type::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SegmentType,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::TrainerId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::segment_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SegmentType.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
