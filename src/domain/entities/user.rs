//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip)]
    pub id: i32,
    pub pseudo: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::lesson::Entity")]
    Lesson,
    #[sea_orm(has_many = "super::path_segment::Entity")]
    PathSegment,
}

impl Related<super::lesson::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Lesson.def()
    }
}

impl Related<super::path_segment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PathSegment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
